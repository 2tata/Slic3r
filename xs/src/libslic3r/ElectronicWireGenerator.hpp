#ifndef slic3r_ElectronicWireGenerator_hpp_
#define slic3r_ElectronicWireGenerator_hpp_

#include "libslic3r.h"
#include "Polyline.hpp"
#include "Polygon.hpp"

namespace Slic3r {


class ElectronicWireGenerator {
public:
    ElectronicWireGenerator(
        // Input:
        // "raw" wires, generated by user, represented as rubberbands in schematic
        Polylines     unrouted_wires,
        double        extrusion_width,
        double        extrusion_overlap,
        double        first_extrusion_overlap,
        double        overlap_min_extrusion_length,
        // Output:
        Polylines*    wires) // resulting wires
        : unrouted_wires(unrouted_wires),
            extrusion_width(extrusion_width),
            extrusion_overlap(extrusion_overlap),
            first_extrusion_overlap(first_extrusion_overlap),
            overlap_min_extrusion_length(overlap_min_extrusion_length),
            wires(wires)
        {};

    void process();

private:
    void apply_overlap(Polylines input, Polylines *output);

    // Inputs:
    Polylines unrouted_wires; ///< copy of original path collection,
                              /// will be deleted during process()
    double extrusion_width;
    double extrusion_overlap;
    double first_extrusion_overlap;
    double overlap_min_extrusion_length;
    // Outputs:
    Polylines* wires;
};

}

#endif
